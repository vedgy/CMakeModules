if(NOT DEFINED CMAKE_CXX_FLAGS_WERE_SET)
    set(CMAKE_CXX_FLAGS_WERE_SET TRUE)

    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")

    if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
        set(CMAKE_CXX_FLAGS
            "${CMAKE_CXX_FLAGS} -std=c++11 -Wall -Wextra")
        set(CMAKE_CXX_FLAGS
            "${CMAKE_CXX_FLAGS} -Wno-missing-field-initializers -pedantic")
        set(CMAKE_CXX_FLAGS
            "${CMAKE_CXX_FLAGS} -Wcast-qual -Wredundant-decls -Winvalid-pch")
        set(CMAKE_CXX_FLAGS
            "${CMAKE_CXX_FLAGS} -Wdisabled-optimization -Wmissing-include-dirs")
        set(CMAKE_CXX_FLAGS
            "${CMAKE_CXX_FLAGS} -Wcast-align -Wdouble-promotion -Wlogical-op")
        set(CMAKE_CXX_FLAGS
            "${CMAKE_CXX_FLAGS} -Wvector-operation-performance")

        if(NOT (CMAKE_CXX_COMPILER_VERSION VERSION_LESS 4.9))
            set(CMAKE_CXX_FLAGS
                "${CMAKE_CXX_FLAGS} -Wconditionally-supported -Wdate-time")
        endif()
    elseif("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang" OR
            "${CMAKE_CXX_COMPILER_ID}" STREQUAL "AppleClang")
        set(CMAKE_CXX_FLAGS
            "${CMAKE_CXX_FLAGS} -Weverything -Wno-c++98-compat-pedantic")
        # These warnings are unavoidable:
        set(CMAKE_CXX_FLAGS
            "${CMAKE_CXX_FLAGS} -Wno-padded -Wno-exit-time-destructors")
        # Qt (or auto-generated by Qt) code triggers these warnings:
        set(CMAKE_CXX_FLAGS
            "${CMAKE_CXX_FLAGS} -Wno-undefined-reinterpret-cast")
        set(CMAKE_CXX_FLAGS
            "${CMAKE_CXX_FLAGS} -Wno-unused-member-function")
        set(CMAKE_CXX_FLAGS
            "${CMAKE_CXX_FLAGS} -Wno-global-constructors")
        set(CMAKE_CXX_FLAGS
            "${CMAKE_CXX_FLAGS} -Wno-missing-prototypes")
    endif()
endif()
